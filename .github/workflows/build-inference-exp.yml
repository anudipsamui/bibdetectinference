name: Build and Push Inference Experimental Images

on:
  workflow_dispatch:
    inputs:
      image_variant:
        type: string
        description: "Image variant to build (e.g., 'cpu', 'cu124', 'jp61') or 'all' for all images. Run 'ls inference_experimental/dockerfiles/' to see available options."
        required: true
        default: "all"
      force_push:
        type: boolean
        description: "Force push to registries"
        default: false
      custom_tag:
        type: string
        description: "Custom tag to use instead of version"
        required: false
  release:
    types: [published]
  push:
    branches:
      - main

env:
  DEPOT_PROJECT_ID: grl7ffzxd7

jobs:
  determine-tags:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.dockerfiles.outputs.matrix }}
      base-tag: ${{ steps.tags.outputs.base-tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read version from pyproject.toml
        run: |
          cd inference_experimental
          VERSION=$(grep -E '^version = ' pyproject.toml | cut -d'"' -f2)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Discover dockerfiles and create matrix
        id: dockerfiles
        run: |
          cd inference_experimental/dockerfiles

          AVAILABLE_PLATFORMS=()
          for dockerfile in *.dockerfile; do
            if [[ $dockerfile =~ ^x86\.([^.]+)\.base\.dockerfile$ ]]; then
              AVAILABLE_PLATFORMS+=("${BASH_REMATCH[1]}")
            elif [[ $dockerfile =~ ^([^.]+)\.([^.]+)\.base\.dockerfile$ ]]; then
              AVAILABLE_PLATFORMS+=("${BASH_REMATCH[1]}")
            fi
          done

          SELECTED_VARIANT="${{ github.event.inputs.image_variant }}"
          if [ -n "$SELECTED_VARIANT" ] && [ "$SELECTED_VARIANT" != "all" ] && [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VALID=false
            for platform in "${AVAILABLE_PLATFORMS[@]}"; do
              if [ "$platform" = "$SELECTED_VARIANT" ]; then
                VALID=true
                break
              fi
            done
            if [ "$VALID" = false ]; then
              echo "Error: Invalid image variant '$SELECTED_VARIANT'"
              echo "Available variants: all, ${AVAILABLE_PLATFORMS[*]}"
              exit 1
            fi
          fi
          
          MATRIX_JSON='{"include":['
          FIRST=true

          if [ "${{ github.event_name }}" = "release" ] || [ -z "$SELECTED_VARIANT" ] || [ "$SELECTED_VARIANT" = "all" ]; then
            BUILD_ALL=true
          else
            BUILD_ALL=false
          fi

          for dockerfile in *.dockerfile; do
            if [[ $dockerfile =~ ^x86\.([^.]+)\.base\.dockerfile$ ]]; then
              # x86.cu118.* -> cu118
              PLATFORM="${BASH_REMATCH[1]}"
            elif [[ $dockerfile =~ ^([^.]+)\.([^.]+)\.base\.dockerfile$ ]]; then
              # jp61.cu126.* -> jp61
              PLATFORM="${BASH_REMATCH[1]}"
            else
              echo "Skipping unrecognized dockerfile pattern: $dockerfile"
              continue
            fi
            
            # Skip if not building all and this isn't the selected variant
            if [ "$BUILD_ALL" = false ] && [ "$PLATFORM" != "$SELECTED_VARIANT" ]; then
              echo "Skipping $PLATFORM (selected: $SELECTED_VARIANT)"
              continue
            fi
            
            # Determine the actual platform for build
            if [[ $PLATFORM == "cpu" ]]; then
              BUILD_PLATFORMS="linux/amd64,linux/arm64"
            elif [[ $PLATFORM == "jp61" ]]; then
              BUILD_PLATFORMS="linux/arm64"
            else
              # All GPU variants only support amd64
              BUILD_PLATFORMS="linux/amd64"
            fi
            
            if [ "$FIRST" = false ]; then
              MATRIX_JSON+=','
            fi
            FIRST=false
            
            MATRIX_JSON+="{\"dockerfile\":\"$dockerfile\",\"platform\":\"$PLATFORM\",\"build_platforms\":\"$BUILD_PLATFORMS\"}"
          done
          
          MATRIX_JSON+=']}'
          echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT
          echo "Generated matrix: $MATRIX_JSON"

      - name: generate tags
        id: tags
        run: |
          BASE_TAG="${{ env.VERSION }}"
          
          # Use custom tag if provided
          if [ -n "${{ github.event.inputs.custom_tag }}" ]; then
            BASE_TAG="${{ github.event.inputs.custom_tag }}"
          fi
          
          echo "base-tag=${BASE_TAG}" >> $GITHUB_OUTPUT

  build:
    needs: determine-tags
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.determine-tags.outputs.matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Depot
        uses: depot/setup-action@v1

      - name: Login to Docker Hub
        if: needs.determine-tags.outputs.should-push == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Determine image tags
        id: image-tags
        run: |
          BASE_TAG="${{ needs.determine-tags.outputs.base-tag }}"
          PLATFORM="${{ matrix.platform }}"
          
          if [ "${{ github.event_name }}" = "release" ]; then
            # For releases, use version tag and latest
            TAGS="roboflow/inference-exp:${PLATFORM}-${BASE_TAG},roboflow/inference-exp:${PLATFORM}-latest"
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            # For main branch, use main tag
            TAGS="roboflow/inference-exp:${PLATFORM}-main"
          else
            # For other cases, use custom tag or version
            TAGS="roboflow/inference-exp:${PLATFORM}-${BASE_TAG}"
          fi
          
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT

      - name: Build and push ${{ matrix.platform }} image
        uses: depot/build-push-action@v1
        with:
          push: ${{ github.event_name == 'release' || (github.event.inputs.force_push == 'true')}}
          context: .
          file: ./inference_experimental/dockerfiles/${{ matrix.dockerfile }}
          platforms: ${{ matrix.build_platforms }}
          tags: ${{ steps.image-tags.outputs.tags }}
          project: ${{ env.DEPOT_PROJECT_ID }}